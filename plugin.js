import { areArgumentsShallowlyEqual } from './helpers.js'


/* реализуйте функцию которая реализует обезьяний патч функции
 * с приведением единственного параметра в верхний регистр
 *
 * Monkey patch (обезьяний патч) — в программировании возможность подмены методов
 * и значений атрибутов классов программы во время её выполнения (runtime).
 * Технология может использоваться во многих динамических языках программирования
 * (JavaScript, Perl, PHP, Python, Ruby, Lua).
 */
export function toUpper(sourceFn) {

    return function () {
        const arrayArg = Array.from(arguments)
        return sourceFn.apply(this, arrayArg.map(element => element.toUpperCase()))
        // Замкнули sourceFn
    }
    // подсказка чтобы получить аргументы функции массивом const argsArray = Array.from(arguments)
}

/* Нужно разработать функцию мемоизации выполнения функций в зависимости от
 * переданных аргументов.
 * Мемоизация (запоминание, от англ. memoization (англ.) в программировании)
 * — сохранение результатов выполнения функций для предотвращения
 * повторных вычислений.
 * Если функция подверглась мемоизации то при ее повторном вызове, с аргументами идентичными
 * аругментам переданным в предыдущий вызов функции, функция должна
 * вернуть предыдущий результат выполнения не производя повторных вычислений
 *
*/
export function memoize(func) {
    let lastResult
    let lastArgs

    return function () {
        // areArgumentsShallowlyEqual Эта функция вам нужна )
    }
}

// --------------------------------------------------------------------------- //

/* Карринг (currying) или каррирование
 * преобразование функции от многих аргументов в набор функций, каждая из которых является функцией от одного аргумента
 * вызов функции sum(a, b) эквивалентен выову карированной функции sum(a)(b)
 *
*/

export function roundGoldByPrecision(precision) {
    // Формула для расчета Math.ceil(Number(gold.toFixed(precision)))
}